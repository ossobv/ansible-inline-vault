#!/usr/bin/env python3
from base64 import b16decode
import os
import subprocess
import sys

# Using "cryptography" libs:
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, padding
from cryptography.hazmat.primitives.hmac import HMAC
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import (
    Cipher as C_Cipher, algorithms, modes
)

# Using plain jinja2:
from jinja2.sandbox import SandboxedEnvironment  # why not..


# == decrypt == from ansible==2.10.0 =========================================#
# /usr/local/lib/python3.8/dist-packages/ansible/parsing/vault/__init__.py

CRYPTOGRAPHY_BACKEND = default_backend()


def _unhexlify(b_data):
    "from ansible==2.10.0"
    return b16decode(b_data.upper())


def _gen_key_initctr(b_password, b_salt):
    "from ansible==2.10.0"
    # 16 for AES 128, 32 for AES256
    key_length = 32

    # AES is a 128-bit block cipher, so IVs and counter nonces are 16 bytes
    iv_length = algorithms.AES.block_size // 8

    b_derivedkey = _create_key_cryptography(b_password, b_salt, key_length, iv_length)
    b_iv = b_derivedkey[(key_length * 2):(key_length * 2) + iv_length]

    b_key1 = b_derivedkey[:key_length]
    b_key2 = b_derivedkey[key_length:(key_length * 2)]

    return b_key1, b_key2, b_iv


def _create_key_cryptography(b_password, b_salt, key_length, iv_length):
    "from ansible==2.10.0"
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=2 * key_length + iv_length,
        salt=b_salt,
        iterations=10000,
        backend=CRYPTOGRAPHY_BACKEND)
    b_derivedkey = kdf.derive(b_password)

    return b_derivedkey


def _decrypt_cryptography(b_ciphertext, b_crypted_hmac, b_key1, b_key2, b_iv):
    "from ansible==2.10.0"
    # b_key1, b_key2, b_iv = self._gen_key_initctr(b_password, b_salt)
    # EXIT EARLY IF DIGEST DOESN'T MATCH
    hmac = HMAC(b_key2, hashes.SHA256(), CRYPTOGRAPHY_BACKEND)
    hmac.update(b_ciphertext)
    hmac.verify(_unhexlify(b_crypted_hmac))  # raises error on fail

    cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)
    decryptor = cipher.decryptor()
    unpadder = padding.PKCS7(128).unpadder()
    b_plaintext = unpadder.update(
        decryptor.update(b_ciphertext) + decryptor.finalize()
    ) + unpadder.finalize()

    return b_plaintext


def _parse_vaulttext(b_vaulttext):
    "from ansible==2.10.0"
    b_vaulttext = _unhexlify(b_vaulttext)
    b_salt, b_crypted_hmac, b_ciphertext = b_vaulttext.split(b"\n", 2)
    b_salt = _unhexlify(b_salt)
    b_ciphertext = _unhexlify(b_ciphertext)

    return b_ciphertext, b_salt, b_crypted_hmac


def decrypt(b_vaulttext, secret_bytes):
    "from ansible==2.10.0"
    b_ciphertext, b_salt, b_crypted_hmac = _parse_vaulttext(b_vaulttext)

    # TODO: would be nice if a VaultSecret could be passed directly to _decrypt_*
    #       (move _gen_key_initctr() to a AES256 VaultSecret or VaultContext impl?)
    # though, likely needs to be python cryptography specific impl that basically
    # creates a Cipher() with b_key1, a Mode.CTR() with b_iv, and a HMAC() with sign key b_key2
    b_password = secret_bytes

    b_key1, b_key2, b_iv = _gen_key_initctr(b_password, b_salt)

    b_plaintext = _decrypt_cryptography(b_ciphertext, b_crypted_hmac, b_key1, b_key2, b_iv)

    return b_plaintext


# == jinja2 ==================================================================#

def _get_vault_password_filename():
    # --vault-password-file
    st = None
    for filename in ('.vault_pass', '.vault_pass.py'):
        try:
            st = os.stat(filename)
        except FileNotFoundError:
            filename = None
        else:
            break
    if filename is None:
        raise ValueError('.vault_pass or .vault_pass.py not found in cwd')
    return filename, st


def _get_vault_password():
    if not hasattr(_get_vault_password, '_cached'):
        filename, st = _get_vault_password_filename()
        # '0o40775' = dir
        # '0o100664' = file
        # '0o100755' = executable
        if (st.st_mode & 0o110100) == 0o100100:
            ret = subprocess.check_output([
	        '{}/{}'.format(os.getcwd(), filename)])
        elif (st.st_mode & 0o110100) == 0o100000:
            with open(filename, 'rb') as fp:
                ret = fp.read()
        else:
            raise ValueError('Unexpected file type of {!r}'.format(filename))
        _get_vault_password._cached = ret
    return _get_vault_password._cached


def _jinja_decrypt_filter(value):
    lines = value.split('\n')
    assert lines[0] == '$ANSIBLE_VAULT;1.1;AES256', lines
    assert len(lines) == 2, lines
    return decrypt(lines[1], _get_vault_password()).decode('utf-8')


def decrypt_file(template_str):
    env = SandboxedEnvironment()
    env.filters['decrypt'] = _jinja_decrypt_filter
    template = env.from_string(template_str)
    return template.render()


# == encrypt_string ==========================================================#

def encrypt_string():
    isatty = os.isatty(sys.stdin.fileno())
    out = (
        subprocess.check_output([
            'ansible-vault', 'encrypt',
            '--vault-pass-file', _get_vault_password_filename()[0]],
            cwd=os.getcwd())
        .decode('utf-8'))
    header, rest = out.split('\n', 1)
    assert header == '$ANSIBLE_VAULT;1.1;AES256', out
    rest = rest.replace('\n', '')
    if isatty:
        print()  # print single LF, in case a password without LF was entered
    print('{{{{ "{}\\n{}"|decrypt }}}}'.format(header, rest))


# == main ====================================================================#

if __name__ == '__main__':
    # '''password={{ "$ANSIBLE_VAULT;1.1;AES256\n36643337363..."|decrypt }}'''
    # print(decrypt('3664333736...', b'secret_vault_password'))

    if sys.argv[1:2] == ['decrypt']:
        if len(sys.argv) == 2:
            out = decrypt_file(sys.stdin.read())
        elif len(sys.argv) == 3:
            with open(sys.argv[2], 'r') as fp:
                out = decrypt_file(fp.read())
        else:
            assert False, NotImplemented
        print(out)

    elif sys.argv[1:] == ['encrypt-string']:
        encrypt_string()

    else:
        print(
            'Usage: ansible-inline-vault encrypt-string|decrypt [filename]',
            file=sys.stderr)
        sys.exit(1)
